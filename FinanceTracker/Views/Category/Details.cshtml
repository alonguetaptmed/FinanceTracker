@model CategoryViewModel
@{
    ViewData["Title"] = "Détails de la catégorie";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 style="color: @Model.Color;">@Model.Name</h1>
    <div>
        <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-primary">
            <i class="bi bi-pencil"></i> Modifier
        </a>
        <a asp-action="Index" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-left"></i> Retour à la liste
        </a>
    </div>
</div>

<div class="row mb-4">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header" style="background-color: @Model.Color; color: #fff;">
                <i class="bi bi-info-circle"></i> Informations de la catégorie
            </div>
            <div class="card-body">
                <dl class="row mb-0">
                    <dt class="col-sm-4">@Html.DisplayNameFor(model => model.Name)</dt>
                    <dd class="col-sm-8">@Html.DisplayFor(model => model.Name)</dd>
                    
                    <dt class="col-sm-4">@Html.DisplayNameFor(model => model.Description)</dt>
                    <dd class="col-sm-8">
                        @if (string.IsNullOrEmpty(Model.Description))
                        {
                            <span class="text-muted">Pas de description</span>
                        }
                        else
                        {
                            @Html.DisplayFor(model => model.Description)
                        }
                    </dd>
                    
                    <dt class="col-sm-4">@Html.DisplayNameFor(model => model.Color)</dt>
                    <dd class="col-sm-8">
                        <div class="d-flex align-items-center">
                            <div style="width: 20px; height: 20px; background-color: @Model.Color; margin-right: 10px; border-radius: 4px;"></div>
                            @Html.DisplayFor(model => model.Color)
                        </div>
                    </dd>
                    
                    <dt class="col-sm-4">Nombre de transactions</dt>
                    <dd class="col-sm-8">@Model.TransactionCount</dd>
                    
                    <dt class="col-sm-4">Montant total</dt>
                    <dd class="col-sm-8">@Model.TotalAmount.ToString("C2")</dd>
                </dl>
            </div>
        </div>
    </div>
    
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <i class="bi bi-graph-up"></i> Statistiques
            </div>
            <div class="card-body">
                <canvas id="categoryChart" height="200"></canvas>
            </div>
        </div>
    </div>
</div>

<div class="card">
    <div class="card-header">
        <i class="bi bi-list"></i> Transactions de la catégorie
    </div>
    <div class="card-body">
        <div id="transactionsList" class="mt-3">
            <div class="text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Chargement...</span>
                </div>
                <p>Chargement des transactions...</p>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Charger les transactions pour cette catégorie
            fetch('/Transaction/GetTransactionsByCategory/@Model.Id')
                .then(response => response.json())
                .then(data => {
                    const transactionsList = document.getElementById('transactionsList');
                    
                    if (data.length === 0) {
                        transactionsList.innerHTML = `
                            <div class="alert alert-info">
                                <p>Aucune transaction n'est associée à cette catégorie.</p>
                                <a href="/Transaction/Create" class="btn btn-success">
                                    <i class="bi bi-plus-circle"></i> Ajouter une transaction
                                </a>
                            </div>
                        `;
                        return;
                    }
                    
                    // Créer un tableau HTML pour afficher les transactions
                    let tableHtml = `
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead>
                                    <tr>
                                        <th>Date</th>
                                        <th>Type</th>
                                        <th>Montant</th>
                                        <th>Compte</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                    `;
                    
                    data.forEach(transaction => {
                        const date = new Date(transaction.date).toLocaleDateString('fr-FR');
                        const type = transaction.type === 0 ? 
                            '<span class="badge bg-danger">Débit</span>' : 
                            '<span class="badge bg-success">Crédit</span>';
                        const amountClass = transaction.type === 0 ? 'text-danger' : 'text-success';
                        const amount = new Intl.NumberFormat('fr-FR', { style: 'currency', currency: 'EUR' }).format(transaction.amount);
                        
                        tableHtml += `
                            <tr>
                                <td>${date}</td>
                                <td>${type}</td>
                                <td class="${amountClass}">${amount}</td>
                                <td>${transaction.accountName}</td>
                                <td>
                                    <div class="btn-group">
                                        <a href="/Transaction/Details/${transaction.id}" class="btn btn-sm btn-info">
                                            <i class="bi bi-info-circle"></i>
                                        </a>
                                        <a href="/Transaction/Edit/${transaction.id}" class="btn btn-sm btn-primary">
                                            <i class="bi bi-pencil"></i>
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        `;
                    });
                    
                    tableHtml += `
                                </tbody>
                            </table>
                        </div>
                    `;
                    
                    transactionsList.innerHTML = tableHtml;
                    
                    // Préparer les données pour le graphique
                    const ctx = document.getElementById('categoryChart').getContext('2d');
                    const months = [];
                    const amounts = [];
                    
                    // Regrouper les transactions par mois
                    const monthlyData = {};
                    data.forEach(transaction => {
                        const date = new Date(transaction.date);
                        const monthKey = `${date.getFullYear()}-${date.getMonth() + 1}`;
                        const monthLabel = date.toLocaleDateString('fr-FR', { month: 'short', year: 'numeric' });
                        
                        if (!monthlyData[monthKey]) {
                            monthlyData[monthKey] = {
                                label: monthLabel,
                                amount: 0
                            };
                        }
                        
                        // Pour les catégories, on utilise le montant affecté à cette catégorie
                        const categoryAmount = transaction.categories.find(c => c.categoryId === @Model.Id)?.amount || 0;
                        monthlyData[monthKey].amount += transaction.type === 0 ? categoryAmount : -categoryAmount;
                    });
                    
                    // Trier les mois chronologiquement
                    const sortedMonths = Object.keys(monthlyData).sort();
                    
                    sortedMonths.forEach(key => {
                        months.push(monthlyData[key].label);
                        amounts.push(Math.abs(monthlyData[key].amount)); // Valeur absolue pour le graphique
                    });
                    
                    // Créer le graphique
                    new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: months,
                            datasets: [{
                                label: 'Montant',
                                data: amounts,
                                backgroundColor: '@Model.Color',
                                borderColor: '@Model.Color',
                                borderWidth: 1
                            }]
                        },
                        options: {
                            responsive: true,
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    ticks: {
                                        callback: function(value) {
                                            return value.toLocaleString('fr-FR', { style: 'currency', currency: 'EUR' });
                                        }
                                    }
                                }
                            },
                            plugins: {
                                title: {
                                    display: true,
                                    text: 'Montants mensuels pour la catégorie @Model.Name'
                                },
                                tooltip: {
                                    callbacks: {
                                        label: function(context) {
                                            return context.dataset.label + ': ' + 
                                                context.raw.toLocaleString('fr-FR', { style: 'currency', currency: 'EUR' });
                                        }
                                    }
                                }
                            }
                        }
                    });
                })
                .catch(error => {
                    console.error('Erreur lors du chargement des transactions:', error);
                    document.getElementById('transactionsList').innerHTML = `
                        <div class="alert alert-danger">
                            <p>Une erreur s'est produite lors du chargement des transactions.</p>
                        </div>
                    `;
                });
        });
    </script>
}
